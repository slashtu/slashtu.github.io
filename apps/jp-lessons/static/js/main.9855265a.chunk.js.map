{"version":3,"sources":["Content.js","App.js","serviceWorker.js","index.js","../node_modules/pdfjs-dist/build sync"],"names":["pdfjs","GlobalWorkerOptions","workerSrc","version","Content","useState","numPages","setNumPages","fileName","useLocation","pathname","split","pop","console","log","process","file","onLoadSuccess","Array","apply","map","x","i","page","className","pageNumber","URL","App","List","text","to","ListItem","button","key","ListItemText","primary","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id"],"mappings":"oPAGAA,QAAMC,oBAAoBC,UAA1B,kDAAiFF,QAAMG,QAAvF,kBAuBeC,MArBf,WAAoB,IAAD,EACeC,mBAAS,MADxB,mBACVC,EADU,KACAC,EADA,KAGXC,EADWC,cACSC,SAASC,MAAM,KAAKC,MAE9C,OADAC,QAAQC,IAAR,UAAeC,mBAAf,YAAyCP,EAAzC,SAEE,6BACE,kBAAC,WAAD,CACEQ,KAAI,UAAKD,mBAAL,YAA+BP,EAA/B,QACJS,cAAe,gBAAGX,EAAH,EAAGA,SAAH,OAAkBC,EAAYD,KAE5CY,MAAMC,MAAM,KAAMD,MAAMZ,IACtBc,KAAI,SAACC,EAAGC,GAAJ,OAAUA,EAAI,KAClBF,KAAI,SAACG,GAAD,OACH,kBAAC,OAAD,CAAMC,UAAU,WAAWC,WAAYF,UCL7CG,G,OAAM,qBAyDGC,MAvDf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKH,UAAU,QACb,yBAAKA,UAAU,OACb,kBAACI,EAAA,EAAD,KACG,CACC,2BACA,uCACA,+DACA,eACA,iCACA,2BACA,2BACA,2BACA,6CACA,mDACA,yDACA,yDACA,yDACA,mDACA,yDACA,yDACA,+DACA,0DACA,0DACA,0DACA,0DACA,0DACA,qBACA,uBACAR,KAAI,SAACS,EAAMP,GAAP,OACJ,kBAAC,IAAD,CAAMQ,GAAE,UAAKJ,EAAL,iBAAiBJ,EAAI,IAC3B,kBAACS,EAAA,EAAD,CAAUC,QAAM,EAACC,IAAKX,GACpB,kBAACY,EAAA,EAAD,CAAcC,QAAO,iBAAYb,EAAI,EAAhB,YAAqBO,YAMpD,yBAAKL,UAAU,WACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOY,OAAK,EAACC,KAAMX,GACjB,kBAAC,IAAD,CAAUI,GAAE,UAAKJ,EAAL,cAEd,kBAAC,IAAD,CAAOW,KAAI,UAAKX,EAAL,aACT,kBAAC,EAAD,YClDMY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,a,iBEzI5B,SAASC,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,I","file":"static/js/main.9855265a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Document, Page, pdfjs } from 'react-pdf';\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n\nfunction Content() {\n  const [numPages, setNumPages] = useState(null);\n  const location = useLocation();\n  const fileName = location.pathname.split('/').pop();\n  console.log(`${process.env.PUBLIC_URL}/${fileName}.pdf`);\n  return (\n    <div>\n      <Document\n        file={`${process.env.PUBLIC_URL}/${fileName}.pdf`}\n        onLoadSuccess={({ numPages }) => setNumPages(numPages)}\n      >\n        {Array.apply(null, Array(numPages))\n          .map((x, i) => i + 1)\n          .map((page) => (\n            <Page className=\"pdf-page\" pageNumber={page} />\n          ))}\n      </Document>\n    </div>\n  );\n}\n\nexport default Content;\n","import React, { useState } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n} from 'react-router-dom';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Content from './Content';\nimport './App.css';\n\nconst URL = '/apps/jp-lessons/';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"page\">\n        <div className=\"nav\">\n          <List>\n            {[\n              '自己紹介',\n              '場所を尋ねる',\n              'コンビニ・レストラン',\n              '交通',\n              '予定や行動',\n              '形容詞①',\n              '形容詞②',\n              '形容詞③',\n              '動詞のグループ',\n              'て形を使った表現',\n              'て形を使った表現②',\n              'て形を使った表現③',\n              'て形を使った表現④',\n              'た形を使った表現',\n              'た形を使った表現②',\n              'ない形を使った表現',\n              'ない形を使った表現②',\n              '普通形を使った表現1',\n              '普通形を使った表現2',\n              '普通形を使った表現3',\n              '普通形を使った表現4',\n              '普通形を使った表現5',\n              '可能形',\n              '可能形2',\n            ].map((text, i) => (\n              <Link to={`${URL}lesson${i + 1}`}>\n                <ListItem button key={i}>\n                  <ListItemText primary={`Lesson ${i + 1} ${text}`} />\n                </ListItem>\n              </Link>\n            ))}\n          </List>\n        </div>\n        <div className=\"content\">\n          <Switch>\n            <Route exact path={URL}>\n              <Redirect to={`${URL}lesson1`} />\n            </Route>\n            <Route path={`${URL}:lessons`}>\n              <Content />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 37;"],"sourceRoot":""}